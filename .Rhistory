require(foreach)
require(magrittr)
require(parallel)
require(doParallel)
require(tcltk)
cl = makeCluster(cluster)
cl = makeCluster(cluster)
registerDoParallel(cl)
getDoParWorkers()    #查看註冊瞭多少個核，配合doMC package中的registerDoMC( )使用
getDoParRegistered() # 查看doPar是否註冊；如果沒有註冊返回FALSE
getDoParRegistered() # 查看doPar是否註冊；如果沒有註冊返回FALSE
getDoParName()       #查看已經註冊的doPar的名字
getDoParVersion()    #查看已經註冊的doPar的version
iterator = 1:nrow(iris)
iter_length = length(iterator)
output <- foreach( i = 1:iter_length, .packages = "tcltk") %dopar% {
if(!exists("tkPB")){
tkPB <- tkProgressBar("Parallel task","Here shows each output.", min=1, max=100)
}
setTkProgressBar(tkPB, i,
title = paste("進度估計",
round(100*i/iter_length), "%"),
loop_function(iterator[i])
)
}
knitr::opts_chunk$set(echo = TRUE)
cluster = 4
loop_function = function(i){
i
}
iterator = c('a','b')
require(foreach)
require(magrittr)
require(parallel)
require(doParallel)
require(tcltk)
cl = makeCluster(cluster)
cl = makeCluster(cluster)
registerDoParallel(cl)
getDoParWorkers()    #查看註冊瞭多少個核，配合doMC package中的registerDoMC( )使用
getDoParRegistered() # 查看doPar是否註冊；如果沒有註冊返回FALSE
getDoParRegistered() # 查看doPar是否註冊；如果沒有註冊返回FALSE
getDoParName()       #查看已經註冊的doPar的名字
getDoParVersion()    #查看已經註冊的doPar的version
iterator = 1:nrow(iris)
iter_length = length(iterator)
output <- foreach( i = 1:iter_length, .packages = "tcltk") %dopar% {
if(!exists("tkPB")){
tkPB <- tkProgressBar("Parallel task","Here shows each output.", min=1, max=100)
}
setTkProgressBar(tkPB, i,
title = paste("進度估計",
round(100*i/iter_length), "%"),
loop_function(iterator[i])
)
}
output <- foreach( i = 1:iter_length, .packages = "tcltk") %dopar% {
if(!exists("tkPB")){
tkPB <- tkProgressBar("Parallel task","Here shows each output.", min=1, max=100)
}
setTkProgressBar(tkPB, i,
title = paste("進度估計",
round(100*i/iter_length), "%"),
loop_function(iterator[i])
)
}
# 關閉平行核心數
stopImplicitCluster()
# 關閉平行核心數
stopImplicitCluster()
stopCluster(cl)
cl = makeCluster(cluster)
cl = makeCluster(cluster)
registerDoParallel(cl)
getDoParWorkers()    #查看註冊瞭多少個核，配合doMC package中的registerDoMC( )使用
getDoParWorkers()    #查看註冊瞭多少個核，配合doMC package中的registerDoMC( )使用
getDoParRegistered() # 查看doPar是否註冊；如果沒有註冊返回FALSE
getDoParName()       #查看已經註冊的doPar的名字
getDoParVersion()    #查看已經註冊的doPar的version
iterator = 1:nrow(iris)
iter_length = length(iterator)
output <- foreach( i = 1:iter_length, .packages = "tcltk") %dopar% {
if(!exists("tkPB")){
tkPB <- tkProgressBar("Parallel task","Here shows each output.", min=1, max=100)
}
setTkProgressBar(tkPB, i,
title = paste("進度估計",
round(100*i/iter_length), "%"),
loop_function(iterator[i])
)
}
output
combine_way <- ifelse(is.null(user_combine), 'c', user_combine)
user_combine
user_combine = None
user_combine = NULL
combine_way <- ifelse(is.null(user_combine), 'c', user_combine)
combine_way
iter_length = length(iterator)
output <- foreach( i = 1:iter_length, .packages = "tcltk", .combine= combine_way) %dopar% {
if(!exists("tkPB")){
tkPB <- tkProgressBar("Parallel task","Here shows each output.", min=1, max=100)
}
setTkProgressBar(tkPB, i,
title = paste("進度估計", round(100*i/iter_length), "%"),
loop_function(iterator[i])
)
}
output
output <- foreach( i = 1:iter_length,
.packages = c("tcltk", "dplyr"),
.combine= combine_way) %dopar% {
if(!exists("tkPB")){
tkPB <- tkProgressBar("Parallel task","Here shows each output.", min=1, max=100)
}
setTkProgressBar(tkPB, i,
title = paste("進度估計", round(100*i/iter_length), "%"),
loop_function(iterator[i])
)
}
output <- foreach( i = 1:iter_length,
.packages = c("tcltk", "dplyr"),
.combine= combine_way) %dopar% {
if(!exists("tkPB")){
tkPB <- tkProgressBar("Parallel task","Here shows each output.", min=1, max=100)
}
setTkProgressBar(tkPB, i,
title = paste("進度估計", round(100*i/iter_length), "%"),
loop_function(iterator[i])
)
}
close(tkPB)
c('a', c('b', 'x'))
external_packages = c(NULL)
c("tcltk", external_packages)
?parallel
para = function(iterator, loop_function, user_combine = 'c',
external_packages = NULL, cluster = 4){
require(foreach)
require(magrittr)
require(parallel)
require(doParallel)
require(tcltk)
cl = makeCluster(cluster)
registerDoParallel(cl)
getDoParWorkers()    #查看註冊瞭多少個核，配合doMC package中的registerDoMC( )使用
getDoParRegistered() # 查看doPar是否註冊；如果沒有註冊返回FALSE
getDoParName()       #查看已經註冊的doPar的名字
getDoParVersion()    #查看已經註冊的doPar的version
iter_length = length(iterator)
output <- foreach( i = 1:iter_length,
.packages = c("tcltk", external_packages),
.combine= user_combine) %dopar% {
if(!exists("tkPB")){
tkPB <- tkProgressBar("Parallel task","Here shows each output.", min=1, max=100)
}
setTkProgressBar(tkPB, i,
title = paste("進度估計", round(100*i/iter_length), "%"),
loop_function(iterator[i])
)
}
# 關閉平行核心數
stopImplicitCluster()
stopCluster(cl)
return(output)
}
iterator = c('a','b')
loop_function = function(i){i}
para(iterator, loop_function)
iterator = rep(c('a','b'), 10000)
loop_function = function(i){i}
para(iterator, loop_function)
output = para(iterator, loop_function)
loop_function = function(x){
if(x == 'a'){
print(a)
}
}
result = para(iterator, loop_function)
# Example
iterator = rep(c('a','b'), 10000)
loop_function = function(x){
if(x == 'a'){
print(x)
}
}
result = para(iterator, loop_function)
result
# Example
iterator = rep(c('a','b'), 10000)
loop_function = function(x){
if(x == 'a'){
return(a)
}else{
cat('b')
}
}
result = para(iterator, loop_function)
# Example
iterator = rep(c('a','b'), 10000)
loop_function = function(x){
if(x == 'a'){
return(x)
}else{
cat('b')
}
}
result = para(iterator, loop_function)
result = para(iterator, loop_function)
result
para = function(iterator, loop_function, user_combine = 'c',
external_packages = NULL, cluster = 4){
require(foreach)
require(magrittr)
require(parallel)
require(doParallel)
require(tcltk)
cl = makeCluster(cluster)
registerDoParallel(cl)
getDoParWorkers()    #查看註冊瞭多少個核，配合doMC package中的registerDoMC( )使用
getDoParRegistered() # 查看doPar是否註冊；如果沒有註冊返回FALSE
getDoParName()       #查看已經註冊的doPar的名字
getDoParVersion()    #查看已經註冊的doPar的version
iter_length = length(iterator)
output <- foreach( i = 1:iter_length,
.packages = c("tcltk", external_packages),
.combine= user_combine) %dopar% {
if(!exists("tkPB")){
tkPB <- tkProgressBar("Parallel task","Here shows each output.", min=1, max=100)
}
setTkProgressBar(tkPB, i,
title = paste("進度估計", round(100*i/iter_length), "%"),
loop_function(iterator[i])
)
loop_function(iterator[i])
}
# 關閉平行核心數
stopImplicitCluster()
stopCluster(cl)
return(output)
}
para = function(iterator, loop_function, user_combine = 'c',
external_packages = NULL, cluster = 4){
require(foreach)
require(magrittr)
require(parallel)
require(doParallel)
require(tcltk)
cl = makeCluster(cluster)
registerDoParallel(cl)
getDoParWorkers()    #查看註冊瞭多少個核，配合doMC package中的registerDoMC( )使用
getDoParRegistered() # 查看doPar是否註冊；如果沒有註冊返回FALSE
getDoParName()       #查看已經註冊的doPar的名字
getDoParVersion()    #查看已經註冊的doPar的version
iter_length = length(iterator)
output <- foreach( i = 1:iter_length,
.packages = c("tcltk", external_packages),
.combine= user_combine) %dopar% {
if(!exists("tkPB")){
tkPB <- tkProgressBar("Parallel task","Here shows each output.", min=1, max=100)
}
setTkProgressBar(tkPB, i,
title = paste("進度估計", round(100*i/iter_length), "%"),
as.character(iterator[i])
)
loop_function(iterator[i])
}
# 關閉平行核心數
stopImplicitCluster()
stopCluster(cl)
return(output)
}
# Example
iterator = rep(c('a','b'), 10000)
loop_function = function(x){
if(x == 'a'){
return(x)
}else{
cat('b')
}
}
result = para(iterator, loop_function)
result
para = function(iterator, loop_function, user_combine = 'c',
external_packages = NULL, cluster = 4){
require(foreach)
require(magrittr)
require(parallel)
require(doParallel)
require(tcltk)
cl = makeCluster(cluster)
registerDoParallel(cl)
getDoParWorkers()    #查看註冊瞭多少個核，配合doMC package中的registerDoMC( )使用
getDoParRegistered() # 查看doPar是否註冊；如果沒有註冊返回FALSE
getDoParName()       #查看已經註冊的doPar的名字
getDoParVersion()    #查看已經註冊的doPar的version
iter_length = length(iterator)
output <- foreach( i = 1:iter_length,
.packages = c("tcltk", external_packages),
.combine= user_combine) %dopar% {
if(!exists("tkPB")){
tkPB <- tkProgressBar("Parallel task","Here shows each output.", min=1, max=100)
}
each_output = loop_function(iterator[i])
setTkProgressBar(tkPB, i,
title = paste("進度估計", round(100*i/iter_length), "%"),
paste(terator[i], ":", each_output)
)
each_output
}
# 關閉平行核心數
stopImplicitCluster()
stopCluster(cl)
return(output)
}
# Example
iterator = rep(c('a','b'), 10000)
loop_function = function(x){
if(x == 'a'){
return(x)
}else{
cat('b')
}
}
result = para(iterator, loop_function)
para = function(iterator, loop_function, user_combine = 'c',
external_packages = NULL, cluster = 4){
require(foreach)
require(magrittr)
require(parallel)
require(doParallel)
require(tcltk)
cl = makeCluster(cluster)
registerDoParallel(cl)
getDoParWorkers()    #查看註冊瞭多少個核，配合doMC package中的registerDoMC( )使用
getDoParRegistered() # 查看doPar是否註冊；如果沒有註冊返回FALSE
getDoParName()       #查看已經註冊的doPar的名字
getDoParVersion()    #查看已經註冊的doPar的version
iter_length = length(iterator)
output <- foreach( i = 1:iter_length,
.packages = c("tcltk", external_packages),
.combine= user_combine) %dopar% {
if(!exists("tkPB")){
tkPB <- tkProgressBar("Parallel task","Here shows each output.", min=1, max=100)
}
each_output = loop_function(iterator[i])
setTkProgressBar(tkPB, i,
title = paste("進度估計", round(100*i/iter_length), "%"),
paste(iterator[i], ":", each_output)
)
each_output
}
# 關閉平行核心數
stopImplicitCluster()
stopCluster(cl)
return(output)
}
# Example
iterator = rep(c('a','b'), 10000)
loop_function = function(x){
if(x == 'a'){
return(x)
}else{
cat('b')
}
}
result = para(iterator, loop_function)
iris
model_NaiveBayes =  naiveBayes(formula = Species ~ .,
data = iris,
na.action = na.pass)
# Example
library(e1071)
model_NaiveBayes =  naiveBayes(formula = Species ~ .,
data = iris,
na.action = na.pass)
pred_NaiveBayes <- predict(model_NaiveBayes,iris) # predict survived
pred_NaiveBayes <- predict(model_NaiveBayes,iris) # predict survived
iris_species <- iris$Species # real survived
pred_NaiveBayes
iris_species
model_performance(pred_NaiveBayes, iris_species)
model_performance <- function(predict_condition, true_condition){
require(dplyr)
require(tidyr)
require(ggplot2)
# Confusion Matrix, Contingency Table
confusion_matrix <- table(predict_condition, true_condition)
# Hit, True Positive
TP <-  confusion_matrix[1,1]
# Correct Rejection, True Negative
TN <- confusion_matrix[2,2]
# False Alarm, Type I Error, False Positive
FP <-  confusion_matrix[1,2]
# Miss, Type II Error, False Negative
FN <-  confusion_matrix[2,1]
# Sensitivity, Recall, True Positive Rate
TPR <- TP / (TP + FN)
# Specificity, Selectivity, True Negative Rate
TNR <- TN / (TN + FP)
# Precision, Positive Predictive Value
PPV <- TP / (TP + FP)
# Negative Prediction Value
NPV <- TN / (TN + FN)
# Miss Rate, False Negative Rate
FNR <- FN /(FN + TP)
# Fall Out, False Positive Rate
FPR <-  FP / (FP + TN)
# False Discovery Rate
FDR <- FP / (FP + TP)
# False Omission Rate
FOR <- FN / (FN + TN)
# Threat Score, Critical Success Index
TS <- TP / (TP + FN + FP)
# Accuracy
ACC <- (TP + TN) / sum(confusion_matrix)
# Balanced Accuracy, Harmonic Mean of Precision and Sensitivity
BA <- (TPR + TNR) / 2
# F1 Score
F1 <- 2*(PPV*TPR)/(PPV+TPR)
# Matthews correlation coefficient
MCC <- (TP*TN -FP*FN) / (sqrt(TP+FP)*sqrt(TP+FN)*sqrt(TN+FP)*sqrt(TN+FN))
# Bookmaker Informedness
BM <- TPR + TNR - 1
# Markedness, delta-P
MK <- PPV + NPV - 1
df = data.frame(
TPR = TPR,
TNR = TNR,
PPV = PPV,
NPV = NPV,
FNR = FNR,
FPR = FPR,
FDR = FDR,
FOR = FOR,
TS = TS,
ACC = ACC,
BA = BA,
F1 = F1,
MCC = MCC,
BM = BM,
MK = MK
)
positive_measure = df[c('TPR', 'TNR', 'PPV', 'NPV', 'F1',
'ACC', 'TS', 'BA', "BM", 'MK')]%>% gather
plot_positive <-  ggplot(positive_measure,
aes(x=reorder(key,-value),y=value,fill=key))+
geom_bar(stat="identity")+
# coord_polar(theta="x",direction=1)+
labs(x="Measure",y="Performance")+
theme(legend.position="bottom",legend.box="horizontal")+
ggtitle(label = 'Positive Model Performance',
subtitle = 'The higher, the better.')+
geom_text(aes(x = reorder(key,-value),
y=value,
label = round(value, 2)),
vjust = 1.2)
negative_measure = df[c("FNR", "FPR", "FDR", "FOR")]%>% gather
plot_negative <- ggplot(negative_measure,
aes(x=reorder(key,-value),y=value,fill=key))+
geom_bar(stat="identity")+
# coord_polar(theta="x",direction=1)+
labs(x="Measure",y="Performance")+
theme(legend.position="bottom",legend.box="horizontal")+
ggtitle(label = 'Negative Model Performance',
subtitle = 'The lower, the better.')+
geom_text(aes(x = reorder(key,-value),
y=value,
label = round(value, 2)),
vjust = 1.2)
return(
list(
confusion_matrix = confusion_matrix,
TP = TP,
TN = TN,
FP = FP,
FN = FN,
TPR = TPR,
TNR = TNR,
PPV = PPV,
NPV = NPV,
FNR = FNR,
FPR = FPR,
FDR = FDR,
FOR = FOR,
TS = TS,
ACC = ACC,
BA = BA,
F1 = F1,
MCC = MCC,
BM = BM,
MK = MK,
df = df,
plot_positive = plot_positive,
plot_negative = plot_negative
)
)
}
model_performance(pred_NaiveBayes, iris_species)
?naiveBayes
# Example
library(e1071)
data(HouseVotes84, package = "mlbench")
install.packages(mlbench)
install.packages('mlbench')
# Example
library(e1071)
data(HouseVotes84, package = "mlbench")
model <- naiveBayes(Class ~ ., data = HouseVotes84)
pred_NaiveBayes <- predict(model, HouseVotes84)
model_performance(pred_NaiveBayes, HouseVotes84$Class)
install.packages("deal")
